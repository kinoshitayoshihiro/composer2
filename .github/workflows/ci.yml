name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        variant: [PURE_PY, PIANO_ML, PG_BETA, PG_DELTA, PIANO_ML_HEAVY]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-test.txt
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install dependencies
        if: matrix.variant == 'PURE_PY' || matrix.variant == 'PG_BETA' || matrix.variant == 'PG_DELTA'
        run: pip install -r requirements.txt
      - name: Install dependencies (ML)
        if: matrix.variant == 'PIANO_ML'
        run: pip install -r requirements.txt torch==2.3.1 transformers==4.43.*
      - name: Install dependencies (ML Heavy)
        if: matrix.variant == 'PIANO_ML_HEAVY'
        run: pip install -r requirements.txt torch==2.3.1 transformers==4.43.* peft
      - name: Install test tools
        run: pip install -e .[test] -r requirements-test.txt
      - name: Set ML env (pure)
        if: matrix.variant == 'PURE_PY' || matrix.variant == 'PG_BETA' || matrix.variant == 'PG_DELTA'
        run: echo "ENABLE_ML_TESTS=false" >> $GITHUB_ENV
      - name: Set ML env (ml)
        if: matrix.variant == 'PIANO_ML' || matrix.variant == 'PIANO_ML_HEAVY'
        run: echo "ENABLE_ML_TESTS=true" >> $GITHUB_ENV
      - name: Restore Essentia wheel cache
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels
          key: ${{ runner.os }}-essentia-2_1
      - name: Install Essentia extras
        if: runner.os == 'Linux'
        run: |
          for i in 1 2 3; do
            pip install -e ".[essentia]" && break || sleep 5
          done
      - name: Save Essentia wheel cache
        if: runner.os == 'Linux'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/essentia*.whl
          key: ${{ runner.os }}-essentia-2_1
      - name: Cache SoundFont
        if: matrix.variant == 'PIANO_ML'
        id: cache-sf2
        uses: actions/cache@v3
        with:
          path: sf2/TimGM6mb.sf2
          key: ${{ runner.os }}-timgm6mb-sf2
      - name: Install SoundFont
        if: matrix.variant == 'PIANO_ML' && steps.cache-sf2.outputs.cache-hit != 'true'
        run: |
          for i in 1 2 3; do
            sudo apt-get update && sudo apt-get install -y fluidsynth timgm6mb-soundfont && break || sleep 5
          done
          mkdir -p sf2
          cp /usr/share/sounds/sf2/TimGM6mb.sf2 sf2/
      - name: Verify SF2 Size
        if: matrix.variant == 'PIANO_ML'
        run: ls -lh sf2/TimGM6mb.sf2
      - name: Run ruff lint
        run: ruff check .
      - name: Mypy
        run: mypy modular_composer utilities tests --strict
      - name: Debug music21
        run: pip list | grep music21
      - name: Pytest
        continue-on-error: ${{ matrix.variant == 'PIANO_ML_HEAVY' }}
        run: |
          if [ "${{ matrix.variant }}" = "PIANO_ML_HEAVY" ]; then
              # Heavy job: 生成系の最小サブセットだけを検証
              pytest -q \
                tests/test_tokenizer.py \
                tests/test_piano_transformer.py \
                tests/test_piano_ml_stub.py
          elif [ "${{ matrix.variant }}" = "PG_DELTA" ]; then
              pytest -q tests/test_articulation_cc.py tests/test_loudness_norm.py tests/test_tone_presets.py
          elif [ "$ENABLE_ML_TESTS" = "true" ]; then
              # 通常 ML ジョブ ― 全テスト実行
              pytest -q
          else
              # PURE_PY / PG_BETA / PG_DELTA ― ML マークを除外
              pytest -q -m "not ml"
          fi
      - name: MIDI Regression Tests
        run: pytest tests/test_midi_regression.py
        env:
          UPDATE_GOLDENS: ${{ github.event.inputs.update_goldens || '0' }}
      - name: Audio Regression Tests
        if: matrix.variant == 'PIANO_ML'
        run: |
          rm -rf tmp && mkdir tmp
          python - << 'EOF'
          from utilities.synth import render_midi
          import pathlib, wave, base64
          loops = ['rock_drive_loop', 'brush_light_loop']
          sf2 = pathlib.Path('sf2/TimGM6mb.sf2')
          for style in loops:
              b64 = pathlib.Path(f'data/golden/{style}.b64').read_text()
              midi_path = pathlib.Path('tmp') / f'{style}.mid'
              midi_path.write_bytes(base64.b64decode(b64))
              out = pathlib.Path('tmp') / f'{style}.wav'
              render_midi(str(midi_path), str(out), soundfont=str(sf2))
              with wave.open(out, 'rb') as wf:
                  frames = wf.getnframes()
                  rate = wf.getframerate()
                  assert frames / rate < 20.0, f"{style}.wav too long"
          EOF
        timeout-minutes: 10
      - name: Audio Spectrum Regression
        if: matrix.variant == 'PIANO_ML'
        run: pytest tests/test_audio_spectrum.py
        timeout-minutes: 5
        env:
          SF2_PATH: sf2/TimGM6mb.sf2
      - name: Upload WAVs on failure
        if: matrix.variant == 'PIANO_ML' && failure()
        uses: actions/upload-artifact@v4
        with:
          name: wav-previews
          path: tmp/*.wav
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: coverage.xml
      - name: Build docs
        run: mkdocs build --strict

  perf-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            pip install -e .[test] -r requirements-test.txt && break || sleep 5
          done
          pip install music21>=9.1 soundfile>=0.12 pyloudnorm>=0.1 pydub>=0.25 mkdocs
      - name: Perf Gate
        run: pytest -m ci_perf --quiet

  stretch-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install deps
        run: |
          for i in 1 2 3; do
            pip install -e .[test,gui] -r requirements-test.txt && break || sleep 5
          done
          pip install music21>=9.1 soundfile>=0.12 pyloudnorm>=0.1 pydub>=0.25 mkdocs
      - name: Install PyTorch
        run: |
          for i in 1 2 3; do
            pip install torch==2.3.0+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html && break || sleep 5
          done
        continue-on-error: true
      - name: Stretch Tests
        run: pytest -m stretch

  core-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            pip install -e .[test] -r requirements-test.txt && break || sleep 5
          done
      - run: python -m build --wheel
      - run: pytest -q tests/test_guitar_phase3.py

  hi-fi-train:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            pip install -e .[test] -r requirements-test.txt && break || sleep 5
          done
          pip install music21>=9.1 soundfile>=0.12 pyloudnorm>=0.1 pydub>=0.25 mkdocs
      - run: |
          python - <<'EOF'
          import json, tempfile
          from pathlib import Path
          from utilities import groove_rnn_v2

          td = Path(tempfile.mkdtemp())
          cache = td / 'loops.json'
          data = {"ppq":480,"resolution":16,"data":[{"file":"a.mid","tokens":[(0,'kick',100,0)],"tempo_bpm":120.0,"bar_beats":4}]}
          cache.write_text(json.dumps(data))
          groove_rnn_v2.train_rnn_v2(cache, epochs=1, progress=False)
          EOF
        timeout-minutes: 1

  low-lat-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip/wheels/**/cyext*
          key: ${{ runner.os }}-cyext-${{ hashFiles('cyext/**.pyx') }}
      - name: Install dependencies
        run: |
          for i in 1 2 3; do
            pip install -e .[test] -r requirements-test.txt && break || sleep 5
          done
          pip install music21>=9.1 soundfile>=0.12 pyloudnorm>=0.1 pydub>=0.25 mkdocs
      - run: |
          python - <<'EOF'
          import mido, sys
          sys.exit(0 if mido.get_output_names() else 1)
          EOF
          STATUS=$?
          if [ "$STATUS" = "0" ]; then
            pytest -m low_lat
          else
            pytest -m low_lat -k "not external_sync"
          fi

  PIANO_ML_SMOKE:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install test tools
        run: pip install -e .[test]
      - name: Install dependencies
        run: pip install torch transformers peft
      - name: Run ruff lint
        run: ruff check .
      - name: Train tiny model
        run: python train_piano_lora.py --data tests/mini.jsonl --epochs 1 --out tmp_model --auto-hparam
      - uses: actions/upload-artifact@v4
        with:
          name: smoke-model
          path: tmp_model/adapter.safetensors
